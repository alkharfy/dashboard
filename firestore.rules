rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules more readable
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function hasRole(role) {
      return isSignedIn() && request.auth.token.role == role;
    }

    function isOneOfRoles(roles) {
      return isSignedIn() && request.auth.token.role in roles;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins and Managers can read any user profile. Users can read their own.
      allow read: if isOneOfRoles(['Admin', 'Manager']) || isUser(userId);
      
      // Users can only update their own profile.
      allow update: if isUser(userId);

      // No one can create or delete user documents directly. This is handled by backend functions.
      allow create, delete: if false;
    }

    // Rules for the 'tasks' collection
    match /tasks/{taskId} {
      // Admins and Managers can read all tasks.
      // Designers and Reviewers can only read tasks they are assigned to.
      allow read: if isOneOfRoles(['Admin', 'Manager'])
                   || (hasRole('Designer') && resource.data.designerId == request.auth.uid)
                   || (hasRole('Reviewer') && resource.data.status == 'in_review');

      // Only Admins and Managers can create new tasks.
      allow create: if isOneOfRoles(['Admin', 'Manager']);

      // Admins can update any task.
      // Designers can update tasks assigned to them.
      // Reviewers can update tasks assigned to them.
      allow update: if hasRole('Admin')
                   || (hasRole('Designer') && resource.data.designerId == request.auth.uid)
                   || (hasRole('Reviewer') && resource.data.status == 'in_review');

      // Only Admins can delete tasks.
      allow delete: if hasRole('Admin');
    }

    // Rules for the 'accounts' collection
    match /accounts/{accountId} {
      // Only Admins can read, create, update, or delete external service accounts.
      allow read, write: if hasRole('Admin');
    }

    // Rules for the 'stats' collection
    match /stats/{statId} {
      // Any authenticated user can read stats (for the dashboard).
      allow read: if isSignedIn();
      
      // Only the backend (via an admin-privileged function) can write to stats.
      allow write: if hasRole('Admin');
    }
  }
}
